{"id":"../../node_modules/axios/lib/helpers/spread.js","dependencies":[{"name":"D:\\learning-projects\\js\\natours\\package.json","includedInParent":true,"mtime":1738789525091},{"name":"D:\\learning-projects\\js\\natours\\node_modules\\axios\\package.json","includedInParent":true,"mtime":1737806351315}],"generated":{"js":"'use strict';\n\n/**\n * Syntactic sugar for invoking a function and expanding an array for arguments.\n *\n * Common use case would be to use `Function.prototype.apply`.\n *\n *  ```js\n *  function f(x, y, z) {}\n *  var args = [1, 2, 3];\n *  f.apply(null, args);\n *  ```\n *\n * With `spread` this example can be re-written.\n *\n *  ```js\n *  spread(function(x, y, z) {})([1, 2, 3]);\n *  ```\n *\n * @param {Function} callback\n *\n * @returns {Function}\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = spread;\nfunction spread(callback) {\n  return function wrap(arr) {\n    return callback.apply(null, arr);\n  };\n}"},"sourceMaps":null,"error":null,"hash":"daf9a016194588a740589d2d7db5a09c","cacheData":{"env":{}}}