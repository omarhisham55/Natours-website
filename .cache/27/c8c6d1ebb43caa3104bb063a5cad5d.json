{"id":"../../node_modules/axios/lib/core/settle.js","dependencies":[{"name":"D:\\learning-projects\\js\\natours\\package.json","includedInParent":true,"mtime":1738789525091},{"name":"D:\\learning-projects\\js\\natours\\node_modules\\axios\\package.json","includedInParent":true,"mtime":1737806351315},{"name":"./AxiosError.js","loc":{"line":3,"column":23,"index":38},"parent":"D:\\learning-projects\\js\\natours\\node_modules\\axios\\lib\\core\\settle.js","resolved":"D:\\learning-projects\\js\\natours\\node_modules\\axios\\lib\\core\\AxiosError.js"}],"generated":{"js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = settle;\nvar _AxiosError = _interopRequireDefault(require(\"./AxiosError.js\"));\nfunction _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }\n/**\n * Resolve or reject a Promise based on response status.\n *\n * @param {Function} resolve A function that resolves the promise.\n * @param {Function} reject A function that rejects the promise.\n * @param {object} response The response.\n *\n * @returns {object} The response.\n */\nfunction settle(resolve, reject, response) {\n  const validateStatus = response.config.validateStatus;\n  if (!response.status || !validateStatus || validateStatus(response.status)) {\n    resolve(response);\n  } else {\n    reject(new _AxiosError.default('Request failed with status code ' + response.status, [_AxiosError.default.ERR_BAD_REQUEST, _AxiosError.default.ERR_BAD_RESPONSE][Math.floor(response.status / 100) - 4], response.config, response.request, response));\n  }\n}"},"sourceMaps":null,"error":null,"hash":"6c55dbb1643893af3d3e9cfe60b7dd04","cacheData":{"env":{}}}